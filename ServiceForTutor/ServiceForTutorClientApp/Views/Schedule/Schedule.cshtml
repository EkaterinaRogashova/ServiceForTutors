﻿@using ServiceForTutorContracts.ViewModels
@using ServiceForTutorClientApp.Helpers
@model List<ScheduleViewModel>

@{
    ViewData["Title"] = "Расписание";
}

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
</head>
<body>
    <div class="container-fluid" style="margin-top: 2%">
       
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="display-4">@ViewBag.HeaderTitle</h1>
        </div>
        @functions {
            List<DateTime> GetDatesOfWeek(DateTime date)
            {
                List<DateTime> dates = new List<DateTime>();
                DateTime firstDay = date.AddDays(-((int)date.DayOfWeek == 0 ? 6 : (int)date.DayOfWeek - 1));
                for (int i = 0; i < 7; i++)
                {
                    dates.Add(firstDay.AddDays(i));
                }
                return dates;
            }
        }

        @{
            DateTime currentDate = ViewBag.CurrentDate != null ? (DateTime)ViewBag.CurrentDate : DateTime.Today;
            var datesOfWeek = GetDatesOfWeek(currentDate);
            var startOfWeek = datesOfWeek.First();

            // Создаем структуру для временных слотов, сгруппированных по дате
            var slotsByDate = datesOfWeek.ToDictionary(d => d, d =>
            Model.Where(m => m.DateTimeStart.Date == d).ToList());

            // Получаем уникальные времена из всех слотов для нового отображения каждого дня
            var uniqueTimesByDay = datesOfWeek.ToDictionary(d => d, d =>
            slotsByDate[d].Select(slot => slot.DateTimeStart.TimeOfDay).Distinct().OrderBy(t => t).ToList());
        }
        <div class="d-flex justify-content-start mt-4 mb-3">
           
            <div class="btn-group" role="group" aria-label="Basic example">
                <form method="post" action="@Url.Action("Schedule", "Schedule")">
                    <input type="hidden" name="currentDate" value="@currentDate.ToString("yyyy-MM-dd")" />
                    <button type="submit" class="btn btn-active" name="direction" value="back">Предыдущая неделя</button>
                    <button type="submit" class="btn btn-active" name="direction" value="forward">Следующая неделя</button>
                </form>
            </div>
            @if (APIClient.Client.Role == "Tutor")
            {
                <button class="btn btn-action"
                        data-bs-toggle="modal"
                        data-bs-target="#addTimeSlotModal"
                        style="background-color: #9ACCFF; color: #300E36; border-radius: 10px; margin-left: 50px;">
                    Добавить время
                </button>
            }
        </div>
        

<div class="compact-schedule-container">
    <input type="date" id="datePicker" class="form-control date-picker" />
    
    <!-- Контейнер для заголовков дней и слотов -->
    <div class="schedule-grid">
        <!-- Пустая ячейка для выравнивания -->
        <div class="corner-cell"></div>
        
        <!-- Заголовки дней недели -->
        <div class="days-header">
            @foreach (var day in datesOfWeek)
            {
                <div class="day-header @(day.Date == DateTime.Today ? "today" : "")">
                    <div class="day-name">@day.ToString("ddd")</div>
                    <div class="day-date">@day.Day</div>
                </div>
            }
        </div>
        
        <!-- Колонка с временами -->
        <div class="time-column">
            @for (var hour = 8; hour < 22; hour++)
            {
                <div class="time-label">@hour:00</div>
            }
        </div>
        
        <!-- Основное содержимое с временными слотами -->
        <div class="days-slots">
            @foreach (var day in datesOfWeek)
            {
                <div class="day-column @(day.Date == DateTime.Today ? "today" : "")">
                    <div class="day-slots-container" style="height: 840px;">
                        @{
                            var localDayStart = new DateTime(day.Year, day.Month, day.Day, 0, 0, 0, DateTimeKind.Local);
                            var daySlots = slotsByDate[day]
                                .Select(s => new {
                                    Slot = s,
                                    LocalStart = s.DateTimeStart.ToLocalTime(),
                                    LocalEnd = s.DateTimeEnd.ToLocalTime()
                                })
                                .OrderBy(x => x.LocalStart)
                                .ToList();
                            
                            var lastEndTime = localDayStart.AddHours(8);
                        }
                        
                        @foreach (var slot in daySlots)
                        {
                            var localStart = slot.LocalStart;
                            var localEnd = slot.LocalEnd;
                            
                            @if (localStart > lastEndTime)
                            {
                                <div class="empty-slot" style="height: @GetMinutesHeight(localStart - lastEndTime)"></div>
                            }
                            
                            
                                var duration = localEnd - localStart;
                                var slotHeight = GetSlotHeight(duration);
                                var topPosition = GetMinutesHeight(localStart.TimeOfDay - TimeSpan.FromHours(8));
                                lastEndTime = localEnd;
                            
                            
                            <div class="time-slot-wrapper" 
                                 style="height: @(slotHeight); top: @(topPosition); min-height: 30px;"
                                 onclick="event.stopPropagation()">
                                
                                        @if (slot.Slot.Status == "Available")
                                        {
                                            if (APIClient.Client.Role == "Student")
                                            {
                                                <button class="time-slot available"
                                                        data-bs-toggle="modal"
                                                        data-bs-target="#reservation"
                                                        data-id="@slot.Slot.Id"
                                                        data-date="@localStart.ToString("yyyy-MM-dd")"
                                                        data-start-time="@localStart.ToString("HH:mm")"
                                                        data-end-time="@localEnd.ToString("HH:mm")"
                                                        data-tutor-id="@slot.Slot.TutorId"
                                                        data-status="@slot.Slot.Status"
                                                        style="min-height: @(slotHeight);">
                                                    <div class="slot-content">
                                                        <div class="time-range">@localStart.ToString("HH:mm")-@localEnd.ToString("HH:mm")</div>
                                                        <div class="slot-text">@StatusTimeSlotDictionary.GetTranslation(slot.Slot.Status)</div>
                                                    </div>
                                                </button>
                                            }
                                            else if (APIClient.Client.Role == "Tutor")
                                            {
                                                <button class="time-slot available"
                                                        data-bs-toggle="modal"
                                                        data-bs-target="#viewTimeSlot"
                                                        data-id="@slot.Slot.Id"
                                                        data-date="@localStart.ToString("yyyy-MM-dd")"
                                                        data-start-time="@localStart.ToString("HH:mm")"
                                                        data-end-time="@localEnd.ToString("HH:mm")"
                                                        data-tutor-id="@slot.Slot.TutorId"
                                                        data-status="@slot.Slot.Status"
                                                        style="min-height: @(slotHeight);">
                                                    <div class="slot-content">
                                                        <div class="time-range">@localStart.ToString("HH:mm")-@localEnd.ToString("HH:mm")</div>
                                                        <div class="slot-text">@StatusTimeSlotDictionary.GetTranslation(slot.Slot.Status)</div>
                                                    </div>
                                                </button>
                                            }
                                        }
                                        else if (slot.Slot.Status == "Booked")
                                        {
                                            if (APIClient.Client.Role == "Tutor")
                                            {
                                                <button class="time-slot booked"
                                                        data-bs-toggle="modal"
                                                        data-bs-target="#viewTimeSlot"
                                                        data-id="@slot.Slot.Id"
                                                        data-date="@localStart.ToString("yyyy-MM-dd")"
                                                        data-start-time="@localStart.ToString("HH:mm")"
                                                        data-end-time="@localEnd.ToString("HH:mm")"
                                                        data-tutor-id="@slot.Slot.TutorId"
                                                        data-status="@slot.Slot.Status"
                                                        data-student-id="@slot.Slot.StudentId"
                                                        style="min-height: @(slotHeight);">
                                                    <div class="slot-content">
                                                        <div class="time-range">@localStart.ToString("HH:mm")-@localEnd.ToString("HH:mm")</div>
                                                        <div class="slot-text">@slot.Slot.Surname @slot.Slot.Name</div>
                                                    </div>
                                                </button>
                                            }
                                            else if (APIClient.Client.Role == "Student" && slot.Slot.StudentId == APIClient.Client.Id)
                                            {
                                                <button class="time-slot booked"
                                                        data-bs-toggle="modal"
                                                        data-bs-target="#viewTimeSlot"
                                                        data-id="@slot.Slot.Id"
                                                        data-date="@localStart.ToString("yyyy-MM-dd")"
                                                        data-start-time="@localStart.ToString("HH:mm")"
                                                        data-end-time="@localEnd.ToString("HH:mm")"
                                                        data-tutor-id="@slot.Slot.TutorId"
                                                        data-status="@slot.Slot.Status"
                                                        data-student-id="@slot.Slot.StudentId"
                                                        style="min-height: @(slotHeight);">
                                                    <div class="slot-content">
                                                        <div class="time-range">@localStart.ToString("HH:mm")-@localEnd.ToString("HH:mm")</div>
                                                        <div class="slot-text">@slot.Slot.Surname @slot.Slot.Name</div>
                                                    </div>
                                                </button>
                                            }
                                            else
                                            {
                                                <button class="time-slot booked" disabled
                                                        style="min-height: @(slotHeight);">
                                                    <div class="slot-content">
                                                        <div class="time-range">@localStart.ToString("HH:mm")-@localEnd.ToString("HH:mm")</div>
                                                        <div class="slot-text">@slot.Slot.Surname @slot.Slot.Name</div>
                                                    </div>
                                                </button>
                                            }
                                        }
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

        @functions {
            string GetMinutesHeight(TimeSpan duration)
            {
                return $"{duration.TotalMinutes}px";
            }

            string GetSlotHeight(TimeSpan duration)
            {
                // Для 30-минутных слотов возвращаем 40px, для остальных - по минутам
                return duration.TotalMinutes == 30 ? "40px" : $"{duration.TotalMinutes}px";
            }
        }


        <div class="modal fade" id="addTimeSlotModal" tabindex="-1" role="dialog" aria-labelledby="addTimeSlotModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="addTimeSlotModalLabel">Добавить время</h5>
                    </div>
                    <form asp-action="AddTimeSlot" method="post">
                        <input type="hidden" id="slotStatus" name="status" value="Available" />
                        <div class="modal-body">
                            <div class="form-group">
                                <label for="slotDate">Выбор даты</label>
                                <input type="date" class="form-control" id="slotDate" name="date" required />
                            </div>
                            <div class="form-group">
                                <label for="slotStartTime">Время начала</label>
                                <input type="time" class="form-control" id="slotStartTime" name="timeStart" required />
                            </div>
                            <div class="form-group">
                                <label for="duration">Продолжительность занятия</label>
                                <select class="form-control" id="duration" name="duration" required>
                                    <option value="0,5">30 минут</option>
                                    <option value="1">1 час</option>
                                    <option value="1,5">1,5 часа</option>
                                    <option value="2">2 часа</option>
                                    <option value="2,5">2,5 часа</option>
                                    <option value="3">3 часа</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="slotEndTime">Время окончания</label>
                                <input type="time" class="form-control" id="slotEndTime" name="endTime" readonly />
                            </div>
                        </div>
                        <div class="modal-footer">
                        <button type="button" class="btn" data-bs-dismiss="modal" style="border-radius: 10px; background-color: #9ACCFF; color: black;">Закрыть</button>
                            <button type="submit" class="btn" style="background-color: #E3EFFF; color: #300E36; border-radius: 10px;">Сохранить</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    

    <div class="modal fade" id="reservation" tabindex="-1" role="dialog" aria-labelledby="reservationLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="reservationLabel">Бронирование</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form asp-action="Reservation" method="post">
                    <div class="modal-body">
                        <input type="hidden" id="modalId" name="id" />
                        <input type="hidden" id="modalTutorId" name="tutorId" />
                        <input type="hidden" id="modalStatus" name="status" />
                        <div class="mb-3">
                            <label>Дата:</label>
                            <p id="modalDate"></p>
                        </div>
                        <div class="mb-3">
                            <label>Время начала:</label>
                            <p id="modalStartTime"></p>
                        </div>
                        <div class="mb-3">
                            <label>Время окончания:</label>
                            <p id="modalEndTime"></p>
                        </div>
                        <div class="mb-3">
                            <label for="duration">Продолжительность занятия:</label>
                            <p id="modalDuration"></p>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn" data-bs-dismiss="modal" style="border-radius: 10px; background-color: #9ACCFF; color: black;">Закрыть</button>
                        <div id="actionButtons"></div>
                        <button type="submit" id="bookButton" class="btn" style="background-color: #E3EFFF; color: #300E36; border-radius: 10px;">Забронировать</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="modal fade" id="viewTimeSlot" tabindex="-1" role="dialog" aria-labelledby="viewTimeSlotLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="viewTimeSlotLabel">Временной слот</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form asp-action="DeleteBook" method="post">
                    <div class="modal-body">
                        <input type="hidden" id="viewModalId" name="id" />
                        <input type="hidden" id="viewModalTutorId" name="tutorId" />
                        <input type="hidden" id="viewModalStatus" name="status" />
                        <input type="hidden" id="viewModalStudentId" name="studentId" />
                        <div class="mb-3">
                            <label>Дата:</label>
                            <p id="viewModalDate"></p>
                            <p id="viewModalDayOfWeek" class="text-muted small"></p>
                        </div>
                        <div class="mb-3">
                            <label>Время начала:</label>
                            <p id="viewModalStartTime"></p>
                        </div>
                        <div class="mb-3">
                            <label>Время окончания:</label>
                            <p id="viewModalEndTime"></p>
                        </div>
                        <div class="mb-3">
                            <label>Продолжительность занятия:</label>
                            <p id="viewModalDuration"></p>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn" data-bs-dismiss="modal" style="border-radius: 10px; background-color: #9ACCFF; color: black;">Закрыть</button>
                        <button type="submit" id="deleteSlotBtn" class="btn" style="background-color: #E3EFFF; color: #300E36; border-radius: 10px; display: none;">Удалить слот</button>
                        <button type="submit" id="cancelLessonBtn" class="btn" style="background-color: #E3EFFF; color: #300E36; border-radius: 10px; display: none;">Отменить занятие</button>
                        <a href="#" id="startLessonBtn" class="btn" style="background-color: #E3EFFF; color: #300E36; border-radius: 10px; display: none;">Начать занятие</a>
                        <a href="#" id="joinLessonBtn" class="btn" style="background-color: #E3EFFF; color: #300E36; border-radius: 10px; display: none;">Подключиться к занятию</a>
                    </div>
                </form>
            </div>
        </div>
    </div>


    
    <div class="modal fade" id="errorModal" tabindex="-1" role="dialog" aria-labelledby="errorModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="errorModalLabel">Ошибка!</h5>
                </div>
                <div class="modal-body">
                    <p id="errorMessage"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn" data-bs-dismiss="modal" style="border-radius: 10px; background-color: #9ACCFF; color: black;">Закрыть</button>
                </div>
            </div>
        </div>
    </div>

</body>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function () {
            var errorMessage = @Html.Raw(Json.Serialize(TempData["ErrorMessage"]));
            if (errorMessage) {
                $('#errorMessage').text(errorMessage);
                $('#errorModal').modal('show');
            }
        });
    </script>
    <script>
        $('#reservation').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget);
            var id = button.data('id');
            var date = button.data('date');
            var startTime = button.data('start-time');
            var endTime = button.data('end-time');
            var tutorId = button.data('tutor-id');
            var status = button.data('status');
            var dayOfWeek = new Date(date).toLocaleDateString('ru-RU', { weekday: 'long' });
            var duration = (new Date("2000-01-01 " + endTime) - new Date("2000-01-01 " + startTime)) / (1000 * 60);

            var modal = $(this);
            modal.find('#modalId').val(id);
            modal.find('#modalDate').text(date);
            modal.find('#modalDayOfWeek').text(dayOfWeek);
            modal.find('#modalStartTime').text(startTime);
            modal.find('#modalEndTime').text(endTime);
            modal.find('#modalTutorId').val(tutorId);
            modal.find('#modalStatus').val(status);
            modal.find('#modalDuration').text(duration / 60 + " часа");

            // Убираем старые кнопки перед добавлением новых
            $('#actionButtons').empty();
            var currentTime = new Date();
            var endDateTime = new Date(date + "T" + endTime);

            //Условие для показа кнопок в зависимости от статуса
            if (endDateTime <= currentTime) {
                // Дата занятия уже прошла, отключаем кнопки
                $('#bookButton').prop('disabled', true);
                $('#cancelButton').prop('disabled', true);
            } else {
                // Условие для показа кнопок в зависимости от статуса
                if (status === "Booked") {
                    // Кнопка "Забронировать" неактивна
                    $('#bookButton').prop('disabled', true);
                    $('#cancelButton').prop('disabled', false);
                } else {
                    // Кнопка "Забронировать" активна
                    $('#bookButton').prop('disabled', false);
                }
            }
        });
        $('#viewTimeSlot').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget);
            console.log("Modal opening with data:", button.data()); // Для отладки

            // Получаем данные из кнопки
            var id = button.data('id');
            var status = button.data('status');
            var tutorId = button.data('tutor-id');
            var studentId = button.data('student-id');
            var dateStr = button.data('date');
            var startTime = button.data('start-time');
            var endTime = button.data('end-time');
            var role = '@APIClient.Client.Role';
            var currentUserId = '@APIClient.Client.Id';

            // Преобразуем дату для правильного отображения дня недели
            var dateObj = new Date(dateStr);
            var dayOfWeek = dateObj.toLocaleDateString('ru-RU', { weekday: 'long' });

            var startDateTime = new Date(dateStr + 'T' + startTime);
            var endDateTime = new Date(dateStr + 'T' + endTime);
            var currentDateTime = new Date();

            // Добавляем 1 час к времени окончания для "льготного периода"
            var gracePeriodEnd = new Date(endDateTime.getTime() + 60 * 60 * 1000);

            // Разница в минутах до начала/окончания
            var minutesToStart = (startDateTime - currentDateTime) / (1000 * 60);
            var minutesAfterEnd = (currentDateTime - gracePeriodEnd) / (1000 * 60);

            // Заполняем данные в модальном окне
            $('#viewModalId').val(id);
            $('#viewModalTutorId').val(tutorId);
            $('#viewModalStatus').val(status);
            $('#viewModalStudentId').val(studentId);
            $('#viewModalDate').text(dateStr);
            $('#viewModalDayOfWeek').text(dayOfWeek);
            $('#viewModalStartTime').text(startTime);
            $('#viewModalEndTime').text(endTime);

            // Рассчитываем продолжительность
            var duration = (new Date(`2000-01-01 ${endTime}`) - new Date(`2000-01-01 ${startTime}`)) / (1000 * 60);
            var durText = duration === 30 ? "30 минут" : (duration / 60) + " часа";
            $('#viewModalDuration').text(durText);

            // Управление кнопками
            $('#deleteSlotBtn, #cancelLessonBtn, #startLessonBtn, #joinLessonBtn').hide();

            if (role === "Tutor") {
                if (status === "Available") {
                    $('#deleteSlotBtn').show();
                } else if (status === "Booked") {
                    $('#cancelLessonBtn').show();
                    var canStartLesson = (minutesToStart <= 10) && (minutesAfterEnd <= 0);

                    if (canStartLesson) {
                        $('#startLessonBtn')
                            .show()
                            .attr('href', `@Url.Action("Lesson", "Schedule")?timeSlotId=${id}&studentId=${studentId}`)
                            .prop('disabled', false)
                            .attr('title', '');
                    } else {
                        var modalMessage = '';
                        if (minutesToStart > 10) {
                            modalMessage = `Вы сможете начать занятие только за 10 минут до его начала.`;
                        } else if (minutesAfterEnd > 0) {
                            modalMessage = 'Это занятие уже завершено. Время для его начала истекло.';
                        }

                        $('#startLessonBtn')
                            .show()
                            .attr('href', '#')
                            .prop('disabled', true)
                            .click(function (e) {
                                e.preventDefault();
                                showCannotStartLessonModal(modalMessage);
                            });
                    }
                }
            } else if (role === "Student" && studentId == currentUserId) {
                $('#joinLessonBtn')
                    .show()
                    .attr('href', `@Url.Action("Lesson", "Schedule")?timeSlotId=${id}`);
            }
        });
    </script>

    <script>
        function showCannotStartLessonModal(message) {
            if (!$('#cannotStartLessonModal').length) {
                $('body').append(`
                    <div class="modal fade" id="cannotStartLessonModal" tabindex="-1" role="dialog" aria-labelledby="cannotStartLessonModalLabel" aria-hidden="true">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="cannotStartLessonModalLabel">Невозможно начать занятие</h5>
                                </div>
                                <div class="modal-body">
                                    <p id="cannotStartLessonMessage"></p>
                                </div>
                                <div class="modal-footer">
                                <button type="button" class="btn" data-bs-dismiss="modal" style="border-radius: 10px; background-color: #9ACCFF; color: black;">Понятно</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `);
            }

            // Устанавливаем сообщение и показываем модальное окно
            $('#cannotStartLessonMessage').text(message);
            $('#cannotStartLessonModal').modal('show');
        }
    $(function () {
        $("#datePicker").datepicker({
            dateFormat: "yy-mm-dd", // Формат даты
            onSelect: function (dateText) {
                var selectedDate = new Date(dateText);
                var newDate = selectedDate.toISOString().split('T')[0]; // Получаем дату в формате yyyy-MM-dd
                window.location.href = `@Url.Action("Schedule")?currentDate=${newDate}`; // Используйте обратные кавычки
            }
        }).datepicker("setDate", new Date()).datepicker("show"); // Установка текущей даты и открытие календаря
    });
    </script>
    <script>
        document.getElementById('datePicker').addEventListener('change', function () {
            var selectedDate = this.value; // Получаем выбранную дату
            var form = document.createElement('form'); // Создаем форму
            form.method = 'post'; // Устанавливаем метод POST
            form.action = '@Url.Action("Schedule", "Schedule")'; // Устанавливаем действие

            // Создаем скрытое поле для передачи выбранной даты
            var hiddenField = document.createElement('input');
            hiddenField.type = 'hidden';
            hiddenField.name = 'currentDate'; // Имя поля
            hiddenField.value = selectedDate; // Значение поля

            form.appendChild(hiddenField); // Добавляем скрытое поле в форму
            document.body.appendChild(form); // Добавляем форму в тело документа
            form.submit(); // Отправляем форму
        });
    </script>


    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const startTimeInput = document.getElementById('slotStartTime');
            const durationSelect = document.getElementById('duration');
            const endTimeInput = document.getElementById('slotEndTime');

            // Функция для вычисления времени окончания
            function calculateEndTime() {
                const startTime = startTimeInput.value;
                const durationHours = parseFloat(durationSelect.value.replace(',', '.'));

                if (startTime) {
                    // Получаем часы и минуты начала занятия
                    const [startHours, startMinutes] = startTime.split(':').map(Number);
                    // Конвертируем все в минуты
                    let totalMinutes = startHours * 60 + startMinutes + (durationHours * 60);
                    // Вычисляем окончание занятия
                    const endHours = Math.floor(totalMinutes / 60) % 24; // Учтем 24 часа
                    const endMinutes = totalMinutes % 60;

                    // Устанавливаем время окончания
                    endTimeInput.value = `${String(endHours).padStart(2, '0')}:${String(endMinutes).padStart(2, '0')}`;
                } else {
                    endTimeInput.value = ''; // Если нет времени начала, очищаем поле окончания
                }
            }
            // Добавляем обработчики событий
            startTimeInput.addEventListener('change', calculateEndTime);
            durationSelect.addEventListener('change', calculateEndTime);
        });

    </script>

}
</html>




<style>
    /* Основные стили расписания */
    .compact-schedule-container {
        font-family: 'Segoe UI', Roboto, sans-serif;
        margin: 20px 0;
    }

    .date-picker {
        width: 200px;
        margin-bottom: 15px;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 8px;
    }

    .week-days-container {
        display: flex;
        gap: 5px;
        overflow-x: auto;
        padding-bottom: 10px;
    }

    /* Колонка с временами */
    .time-column {
        width: 50px;
        flex-shrink: 0;
        margin-top: 40px; /* Для заголовка дня */
        background: #f8f9fa;
    }

    .time-label {
        height: 60px;
        font-size: 12px;
        text-align: right;
        padding-right: 5px;
        position: relative;
        top: -10px;
        color: #70757a;
    }

    /* Стили для дней */
    .day-column {
        flex: 1;
        min-width: 120px;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        background: white;
        margin-right: 12px;
    }

        .day-column.today {
            border-color: #1a73e8;
            background-color: #f1f3f4;
        }

    .day-header {
        text-align: center;
        padding: 8px 0;
        border-bottom: 1px solid #eee;
    }

    .day-name {
        font-size: 14px;
        color: #70757a;
        text-transform: uppercase;
    }

    .day-date {
        font-size: 20px;
        font-weight: 400;
        margin-top: 5px;
    }

    .day-column.today .day-date {
        color: #1a73e8;
    }

    /* Контейнер для слотов */
    .day-slots-container {
        position: relative;

    }

    /* Стили временных слотов */
    <style >
    /* Обновленные стили для слотов */
    .time-slot-wrapper {
        position: absolute;
        left: 2px;
        right: 2px;
        margin: 1px 0;
    }

    .time-slot {
        width: 100%;
        height: 100%;
        border-radius: 4px;
        padding: 4px;
        border: none;
        cursor: pointer;
        display: flex;
        flex-direction: column;
        justify-content: center;
        text-align: left;
        transition: all 0.2s;
        font-size: 12px;
        overflow: hidden;
    }

    .slot-content {
        display: flex;
        flex-direction: column;
        height: 100%;
        justify-content: center;
    }

    .time-range {
        font-weight: 500;
        white-space: nowrap;
        line-height: 1.2;
    }

    .slot-text {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        line-height: 1.2;
        font-size: 11px;
    }

    .time-slot.available {
        background-color: #e6f4ea;
        color: #188038;
        border: 1px solid #81c995;
    }

    .time-slot.booked {
        background-color: #fce8e6;
        color: #d93025;
        border: 1px solid #f28b82;
    }

    .time-slot:disabled {
        cursor: not-allowed;
        opacity: 0.7;
    }
    .btn-active {
        background-color: #E3EFFF;
        color: #300E36;
        border-radius: 10px;
        border: none;
    }

    .btn-active:hover {
            background-color: #9ACCFF;
    }

    .time-slot {
        min-height: 40px; /* Минимальная высота для всех слотов */
    }

    .time-slot-wrapper[style*="height: 30px"] {
        height: 40px !important; /* Принудительно увеличиваем 30-минутные слоты */
    }


    .schedule-grid {
        display: grid;
        grid-template-columns: auto 1fr;
        grid-template-rows: auto 1fr;
        margin-top: 10px;
    }

    .corner-cell {
        grid-row: 1;
        grid-column: 1;
        width: 50px; /* Ширина time-column */
        height: 40px; /* Высота days-header */
    }

    .days-header {
        grid-row: 1;
        grid-column: 2;
        display: flex;
    }

    .time-column {
        grid-row: 2;
        grid-column: 1;
        width: 50px;
        background: #f8f9fa;
    }

    .days-slots {
        grid-row: 2;
        grid-column: 2;
        display: flex;
        overflow-x: auto;
    }

    /* Остальные стили остаются без изменений */
    .day-header {
        flex: 1;
        text-align: center;
        padding: 5px 0;
        border-bottom: 1px solid #eee;
        min-width: 120px;
    }

    .time-label {
        height: 60px;
        font-size: 12px;
        text-align: right;
        padding-right: 5px;
        position: relative;
        top: -10px;
        color: #70757a;
    }

</style>



