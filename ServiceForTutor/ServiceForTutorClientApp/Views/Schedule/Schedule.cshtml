﻿@using ServiceForTutorContracts.ViewModels
@using ServiceForTutorClientApp.Helpers
@model List<ScheduleViewModel>

@{
    ViewData["Title"] = "Расписание";
}

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
</head>
<body>
    <div class="container-fluid" style="margin-top: 2%">
       
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="display-4">@ViewBag.HeaderTitle</h1>
        </div>
        @functions {
            List<DateTime> GetDatesOfWeek(DateTime date)
            {
                List<DateTime> dates = new List<DateTime>();
                DateTime firstDay = date.AddDays(-((int)date.DayOfWeek == 0 ? 6 : (int)date.DayOfWeek - 1));
                for (int i = 0; i < 7; i++)
                {
                    dates.Add(firstDay.AddDays(i));
                }
                return dates;
            }
        }

        @{
            DateTime currentDate = ViewBag.CurrentDate != null ? (DateTime)ViewBag.CurrentDate : DateTime.Today;
            var datesOfWeek = GetDatesOfWeek(currentDate);
            var startOfWeek = datesOfWeek.First();

            // Создаем структуру для временных слотов, сгруппированных по дате
            var slotsByDate = datesOfWeek.ToDictionary(d => d, d =>
            Model.Where(m => m.DateTimeStart.Date == d).ToList());

            // Получаем уникальные времена из всех слотов для нового отображения каждого дня
            var uniqueTimesByDay = datesOfWeek.ToDictionary(d => d, d =>
            slotsByDate[d].Select(slot => slot.DateTimeStart.TimeOfDay).Distinct().OrderBy(t => t).ToList());
        }
        <div class="d-flex justify-content-start mt-4 mb-3">
            <div class="btn-group" role="group" aria-label="Basic example">
                <form method="post" action="@Url.Action("Schedule", "Schedule")">
                    <input type="hidden" name="currentDate" value="@currentDate.ToString("yyyy-MM-dd")" />
                    <button type="submit" class="btn btn-active" name="direction" value="back">Предыдущая неделя</button>
                    <button type="submit" class="btn btn-active" name="direction" value="forward">Следующая неделя</button>
                </form>
            </div>
            @if (APIClient.Client.Role == "Tutor")
            {
                <button class="btn btn-action"
                        data-bs-toggle="modal"
                        data-bs-target="#addTimeSlotModal"
                        style="background-color: #DBCEF6; color: #300E36; border-radius: 10px; margin-left: 50px;">
                    Добавить время
                </button>
            }
        </div>
        

        <div class="schedule-container">
            <input type="date" id="datePicker" class="form-control mx-2" style="width: 200px; height: 40px;" />
            @foreach (var day in datesOfWeek)
            {
                <div class="day-schedule">
                    <h5>@(day.ToString("dddd, dd MMMM"))</h5> <!-- Заголовок с днем недели -->
                    <table class="table">
                        <thead>
                        </thead>
                        <tbody>
                            @foreach (var time in uniqueTimesByDay[day]) // Используем уникальные времена для текущего дня
                            {
                                var timeSlot = slotsByDate[day].FirstOrDefault(m => m.DateTimeStart.TimeOfDay == time);
                                var duration = timeSlot != null ? (int)(timeSlot.DateTimeEnd - timeSlot.DateTimeStart).TotalMinutes : 0;

                                <tr>
                                    <td style="vertical-align: top; text-align: center;">
                                        @if (timeSlot != null)
                                        {
                                            var localStartDate = timeSlot.DateTimeStart.ToLocalTime();
                                            var localEndDate = timeSlot.DateTimeEnd.ToLocalTime();

                                            <button class="time-slot-button" data-bs-toggle="modal"
                                                    data-bs-target="@((APIClient.Client.Role == "Student" && timeSlot.Status == "Available") ? "#reservation" : "#viewTimeSlot")"
                                                    data-id="@timeSlot.Id"
                                                    data-date="@localStartDate.ToString("yyyy-MM-dd")"
                                                    data-start-time="@localStartDate.ToString("HH:mm")"
                                                    data-end-time="@localEndDate.ToString("HH:mm")"
                                                    data-tutor-id="@timeSlot.TutorId"
                                                    data-status="@timeSlot.Status">
                                                @StatusTimeSlotDictionary.GetTranslation(timeSlot.Status) <br />
                                                @localStartDate.ToString("HH:mm") - @localEndDate.ToString("HH:mm")
                                            </button>
                                        }
                                        else
                                        {
                                            <span style="display: block; height: 20px;"></span> <!-- Пустой элемент для визуального выравнивания -->
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>


        <div class="modal fade" id="addTimeSlotModal" tabindex="-1" role="dialog" aria-labelledby="addTimeSlotModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="addTimeSlotModalLabel">Добавить время</h5>
                    </div>
                    <form asp-action="AddTimeSlot" method="post">
                        <input type="hidden" id="slotStatus" name="status" value="Available" />
                        <div class="modal-body">
                            <div class="form-group">
                                <label for="slotDate">Выбор даты</label>
                                <input type="date" class="form-control" id="slotDate" name="date" required />
                            </div>
                            <div class="form-group">
                                <label for="slotStartTime">Время начала</label>
                                <input type="time" class="form-control" id="slotStartTime" name="timeStart" required />
                            </div>
                            <div class="form-group">
                                <label for="duration">Продолжительность занятия</label>
                                <select class="form-control" id="duration" name="duration" required>
                                    <option value="0,5">30 минут</option>
                                    <option value="1">1 час</option>
                                    <option value="1,5">1,5 часа</option>
                                    <option value="2">2 часа</option>
                                    <option value="2,5">2,5 часа</option>
                                    <option value="3">3 часа</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="slotEndTime">Время окончания</label>
                                <input type="time" class="form-control" id="slotEndTime" name="endTime" readonly />
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
                            <button type="submit" class="btn" style="background-color: #C5A8EA; color: #300E36; border-radius: 10px;">Сохранить</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    

    <div class="modal fade" id="reservation" tabindex="-1" role="dialog" aria-labelledby="reservationLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="reservationLabel">Бронирование</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form asp-action="Reservation" method="post">
                    <div class="modal-body">
                        <input type="hidden" id="modalId" name="id" />
                        <input type="hidden" id="modalTutorId" name="tutorId" />
                        <input type="hidden" id="modalStatus" name="status" />
                        <div class="mb-3">
                            <label>Дата:</label>
                            <p id="modalDate"></p>
                        </div>
                        <div class="mb-3">
                            <label>День недели:</label>
                            <p id="modalDayOfWeek"></p>
                        </div>
                        <div class="mb-3">
                            <label>Время начала:</label>
                            <p id="modalStartTime"></p>
                        </div>
                        <div class="mb-3">
                            <label>Время окончания:</label>
                            <p id="modalEndTime"></p>
                        </div>
                        <div class="mb-3">
                            <label for="duration">Продолжительность занятия:</label>
                            <p id="modalDuration"></p>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
                        <div id="actionButtons"></div>
                        <button type="submit" id="bookButton" class="btn" style="background-color: #C5A8EA; color: #300E36; border-radius: 10px;">Забронировать</button>
                    </div>
                </form>
            </div>
        </div>
    </div>


    <div class="modal fade" id="viewTimeSlot" tabindex="-1" role="dialog" aria-labelledby="viewTimeSlotLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="viewTimeSlotLabel">Бронирование</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form asp-action="DeleteBook" method="post">
                    <div class="modal-body">
                        <input type="hidden" id="modalId" name="id" />
                        <input type="hidden" id="modalTutorId" name="tutorId" />
                        <input type="hidden" id="modalStatus" name="status" />
                        <div class="mb-3">
                            <label>Дата:</label>
                            <p id="modalDate"></p>
                        </div>
                        <div class="mb-3">
                            <label>День недели:</label>
                            <p id="modalDayOfWeek"></p>
                        </div>
                        <div class="mb-3">
                            <label>Время начала:</label>
                            <p id="modalStartTime"></p>
                        </div>
                        <div class="mb-3">
                            <label>Время окончания:</label>
                            <p id="modalEndTime"></p>
                        </div>
                        <div class="mb-3">
                            <label for="duration">Продолжительность занятия:</label>
                            <p id="modalDuration"></p>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
                        <button id="cancelButton" type="submit" class="btn" style="background-color: #C5A8EA; color: #300E36; border-radius: 10px;">Отменить занятие</button>
                        <button id="startLesson" type="submit" class="btn" style="background-color: #C5A8EA; color: #300E36; border-radius: 10px;">Начать занятие</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <div class="modal fade" id="errorModal" tabindex="-1" role="dialog" aria-labelledby="errorModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="errorModalLabel">Ошибка!</h5>
                </div>
                <div class="modal-body">
                    <p id="errorMessage"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
                </div>
            </div>
        </div>
    </div>

</body>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function () {
            var errorMessage = @Html.Raw(Json.Serialize(TempData["ErrorMessage"]));
            if (errorMessage) {
                $('#errorMessage').text(errorMessage);
                $('#errorModal').modal('show');
            }
        });
    </script>
    <script>
        $('#reservation').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget);
            var id = button.data('id');
            var date = button.data('date');
            var startTime = button.data('start-time');
            var endTime = button.data('end-time');
            var tutorId = button.data('tutor-id');
            var status = button.data('status');
            var dayOfWeek = new Date(date).toLocaleDateString('ru-RU', { weekday: 'long' });
            var duration = (new Date("2000-01-01 " + endTime) - new Date("2000-01-01 " + startTime)) / (1000 * 60);

            var modal = $(this);
            modal.find('#modalId').val(id);
            modal.find('#modalDate').text(date);
            modal.find('#modalDayOfWeek').text(dayOfWeek);
            modal.find('#modalStartTime').text(startTime);
            modal.find('#modalEndTime').text(endTime);
            modal.find('#modalTutorId').val(tutorId);
            modal.find('#modalStatus').val(status);
            modal.find('#modalDuration').text(duration / 60 + " часа");

            // Убираем старые кнопки перед добавлением новых
            $('#actionButtons').empty();

            // Условие для показа кнопок в зависимости от статуса
            if (status === "Booked") {
                // Кнопка "Забронировать" неактивна
                $('#bookButton').prop('disabled', true);
                $('#cancelButton').prop('disabled', false);
            } else {
                // Кнопка "Забронировать" активна
                $('#bookButton').prop('disabled', false);
            }
        });

        $('#viewTimeSlot').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget);
            var id = button.data('id');
            var date = button.data('date');
            var startTime = button.data('start-time');
            var endTime = button.data('end-time');
            var tutorId = button.data('tutor-id');
            var status = button.data('status');
            var dayOfWeek = new Date(date).toLocaleDateString('ru-RU', { weekday: 'long' });
            var duration = (new Date(`2000-01-01 ${endTime}`) - new Date(`2000-01-01 ${startTime}`)) / (1000 * 60);

            var modal = $(this);
            modal.find('#modalId').val(id);
            modal.find('#modalDate').text(date);
            modal.find('#modalDayOfWeek').text(dayOfWeek);
            modal.find('#modalStartTime').text(startTime);
            modal.find('#modalEndTime').text(endTime);
            modal.find('#modalTutorId').val(tutorId);
            modal.find('#modalStatus').val(status);
            modal.find('#modalDuration').text(duration / 60 + " часа");

            var startDateTime = new Date(`${date}T${startTime}`); // Создаем объект даты/времени начала занятия
            var currentTime = new Date(); // Текущая дата/время

            // Разница во времени в миллисекундах
            var timeDifference = startDateTime - currentTime;

            if (status === "Booked") {
                $('#cancelButton').prop('disabled', false); // Активируем кнопку отмены

                // Проверяем, активировать ли кнопку "Начать занятие"
                if (timeDifference <= 5 * 60 * 1000 && timeDifference > 0) { // Если осталось 5 минут или меньше
                    $('#startLesson').prop('disabled', false); // Активируем кнопку "Начать занятие"
                } else {
                    $('#startLesson').prop('disabled', true); // Деактивируем кнопку "Начать занятие"
                }
            } else {
                $('#cancelButton').text('Удалить занятие');
                $('#cancelButton').prop('disabled', false); // Активируем кнопку удаления
                $('#startLesson').prop('disabled', true); // Деактивируем кнопку "Начать занятие"
            }
        });
    </script>

    <script>
    $(function () {
        $("#datePicker").datepicker({
            dateFormat: "yy-mm-dd", // Формат даты
            onSelect: function (dateText) {
                var selectedDate = new Date(dateText);
                var newDate = selectedDate.toISOString().split('T')[0]; // Получаем дату в формате yyyy-MM-dd
                window.location.href = `@Url.Action("Schedule")?currentDate=${newDate}`; // Используйте обратные кавычки
            }
        }).datepicker("setDate", new Date()).datepicker("show"); // Установка текущей даты и открытие календаря
    });
    </script>
    <script>
        document.getElementById('datePicker').addEventListener('change', function () {
            var selectedDate = this.value; // Получаем выбранную дату
            var form = document.createElement('form'); // Создаем форму
            form.method = 'post'; // Устанавливаем метод POST
            form.action = '@Url.Action("Schedule", "Schedule")'; // Устанавливаем действие

            // Создаем скрытое поле для передачи выбранной даты
            var hiddenField = document.createElement('input');
            hiddenField.type = 'hidden';
            hiddenField.name = 'currentDate'; // Имя поля
            hiddenField.value = selectedDate; // Значение поля

            form.appendChild(hiddenField); // Добавляем скрытое поле в форму
            document.body.appendChild(form); // Добавляем форму в тело документа
            form.submit(); // Отправляем форму
        });
    </script>


    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const startTimeInput = document.getElementById('slotStartTime');
            const durationSelect = document.getElementById('duration');
            const endTimeInput = document.getElementById('slotEndTime');

            // Функция для вычисления времени окончания
            function calculateEndTime() {
                const startTime = startTimeInput.value;
                const durationHours = parseFloat(durationSelect.value.replace(',', '.'));

                if (startTime) {
                    // Получаем часы и минуты начала занятия
                    const [startHours, startMinutes] = startTime.split(':').map(Number);
                    // Конвертируем все в минуты
                    let totalMinutes = startHours * 60 + startMinutes + (durationHours * 60);
                    // Вычисляем окончание занятия
                    const endHours = Math.floor(totalMinutes / 60) % 24; // Учтем 24 часа
                    const endMinutes = totalMinutes % 60;

                    // Устанавливаем время окончания
                    endTimeInput.value = `${String(endHours).padStart(2, '0')}:${String(endMinutes).padStart(2, '0')}`;
                } else {
                    endTimeInput.value = ''; // Если нет времени начала, очищаем поле окончания
                }
            }

            // Добавляем обработчики событий
            startTimeInput.addEventListener('change', calculateEndTime);
            durationSelect.addEventListener('change', calculateEndTime);
        });

    </script>

}
</html>





<style>
    .time-slot-button {
        border-radius: 10px;
        width: 90%; /* Ширина кнопки 90% от ширины ячейки */
        background-color: plum;
        color: white;
        border: none;
        cursor: pointer;
        min-height: 30px; /* Минимальная высота кнопки для видимости */
        transition: background-color 0.3s; /* Плавный переход цвета при наведении */
        display: block; /* Чтобы margin работал */
        margin: 0 auto; /* Центрирование кнопки */
    }

    .schedule-container {
        display: flex;
        flex-wrap: wrap; /* Вертикальное расположение таблиц */
        gap: 10px; /* Интервал между таблицами */
    }

    .day-schedule {
        border: 1px solid #ccc; /* Граница вокруг каждой таблицы */
        padding: 5px; /* Отступ внутри таблицы */
        border-radius: 5px; /* Закругленные углы */
        max-width: 11%; /* Ограничиваем максимальную ширину таблицы */
    }
    .time-slot-button:hover {
        background-color: mediumorchid; /* Цвет при наведении для улучшения UX */
    }

    .btn-active {
        background-color: #C5A8EA;
        color: #300E36;
        border-radius: 10px;
        border: none;
    }

    .btn-active:hover {
       background-color: #A67CBB;
    }

</style>


