@using ServiceForTutorContracts.ViewModels
@model TaskViewModel
@{
    ViewData["Title"] = "Редактирование задания";
}

<body>
    <div class="container mt-5">   
        <div class="d-flex justify-content-between align-items-center">
            <h1 class="display-4">Редактирование задания</h1>
        </div>

        <div class="container">
            <div class="row" style="margin-top: 20px;">
                <div class="col-md-6">
                    <div class="p-4" style="background-color: #E3EFFF; border-radius: 10px;">
                        <h3 class="text-center mt-3" style="color: #300E36;">@Model.Name</h3>
                        <p style="font-weight: bold;">Тема: @Model.Topic</p>
                        <p style="font-weight: bold;">Предмет: @Model.Subject</p>
                        <div class="d-flex justify-content-end">
                            <button class="btn me-2" style="background-color: #9ACCFF; color: #300E36; border-radius: 10px;" data-bs-toggle="modal" data-bs-target="#addQuestionModal">Добавить вопрос</button>
                            <button class="btn" style="background-color: rgba(70, 144, 229, 0.3); color: #300E36; border-radius: 10px;" data-bs-toggle="modal" data-bs-target="#assignTaskModal">Назначить ученика</button>
                        </div>
                    </div>
                </div>
                <div class="col-md-6 text-center">
                    <img src="https://okeygeek.ru/wp-content/uploads/2019/09/icon_needs_assessment_blue-300x300-768x768.png" alt="" style="max-width: 40%; margin-left: -20px; height: auto; border-radius: 10px; margin-top: -20px;">
                </div>
            </div>
        </div>

        <div class="alert alert mt-4" role="alert" style="background-color: rgba(227, 239, 255, 0.3); border-radius: 0;">
            <h4 class="alert-heading">Инструкция по смене вопросов местами</h4>
            <p>
                Для изменения порядка вопросов, просто перетащите карточку вопроса, которую хотите переместить,
                на новое место в списке вопросов. Отпустите кнопку мыши, чтобы записать новое положение.
            </p>
            <hr>
            <p class="mb-0">Нажмите на кнопку <strong>Добавить вопрос</strong> для добавления новых вопросов в задание.</p>
        </div>


        <div class="mt-4" id="questionsList">
            <h4 class="text-center" style="color: #300E36;">Вопросы к заданию</h4>
            @if (Model.Questions != null && Model.Questions.Any())
            {
                foreach (var question in Model.Questions)
                {
                    <div class="d-flex mb-3 question-card" data-question-id="@question.Id" style="width: 100%;" draggable="true" ondragstart="drag(event)" ondragover="allowDrop(event)" ondrop="drop(event)">
                        <div class="flex-fill" style="min-width: 70%; max-width: 90%; /* Задайте фиксированную ширину */">
                            <div class="card" style="background-color: rgba(227, 239, 255, 0.3); border-radius: 0;">
                                <div class="card-body">

                                    <div class="d-flex align-items-center">
                                        <div class="rounded-circle d-flex justify-content-center align-items-center" style="width: 40px; height: 40px; background-color: #9ACCFF; color: black; font-weight: bold; margin-right: 15px;">
                                            @question.NumberInTask
                                        </div>
                                        <h5 class="card-title mb-0 flex-fill">@question.TaskText</h5>
                                        <span style="font-size: 0.9rem; color: #6c757d;">Тип: @question.TypeQuestion</span>
                                    </div>

                                    <hr />
                                    <div class="d-flex justify-content-between align-items-center">
                                        <p class="mb-0">Максимальный балл: <strong>@question.MaxScore</strong></p>
                                    </div>

                                    @if (question.TypeQuestion == "Краткий ответ" && question.GetCorrectAnswers().FirstOrDefault() != null)
                                    {
                                        <p class="card-text mt-3">Правильный ответ: <strong>@question.GetCorrectAnswers().FirstOrDefault()</strong></p>
                                    }
                                    else
                                    {
                                        <ul class="list-group list-group-flush">
                                            @if (question.Answers != null && question.Answers.Any())
                                            {
                                                foreach (var answer in question.GetAnswers())
                                                {
                                                    if (answer != null)
                                                    {
                                                        <li class="list-group-item d-flex justify-content-between align-items-center border-bottom">
                                                            <!-- Добавлена граница -->
                                                            <span>@answer</span>
                                                            @if (question.GetCorrectAnswers().Contains(answer))
                                                            {
                                                                <span class="badge bg-success ms-2">Правильный ответ</span>
                                                            }
                                                        </li>
                                                    }
                                                }
                                            }
                                        </ul>
                                        
                                    }
                                    @if (question.FileUrls != null && question.FileDownloadLinks != null && question.FileDownloadLinks.Any())
                                    {
                                        <div class="mt-3">
                                            <h6>Прикрепленные файлы:</h6>
                                            <ul class="list-group">
                                                @for (int i = 0; i < question.FileDownloadLinks.Count; i++)
                                                {
                                                    var fileLink = question.FileDownloadLinks[i];
                                                    var isImage = fileLink.Contains("content_type=image");

                                                    <li class="list-group-item">
                                                        @if (isImage)
                                                        {
                                                            <img src="@fileLink" alt="Изображение" style="max-width: 100%; height: auto;" />
                                                        }
                                                        else
                                                        {
                                                            <a href="@fileLink" target="_blank">Скачать файл</a>
                                                        }
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    }
                                
                                </div>
                            </div>
                        </div>

                        <!-- Контейнер для кнопок -->
                        <div style="min-width: 20%; max-width: 50%; /* Задайте фиксированную ширину */">
                            <div style="display: flex; flex-direction: column; height: 100%; margin-left: 20px; align-self: center;">
                                @* <button class="btn" style="background-color: #DBCEF6; color: #300E36; border-radius: 10px; margin-bottom: 10px;"
                                        data-bs-toggle="modal"
                                        data-bs-target="#editQuestionModal"
                                        data-question-id="@question.Id"
                                        data-question-text="@question.TaskText"
                                        data-question-type="@question.TypeQuestion"
                                        data-question-maxscore="@question.MaxScore"
                                        data-answers='@Html.Raw(System.Text.Json.JsonSerializer.Serialize(question.Answers))'
                                        data-correct-answers='@Html.Raw(System.Text.Json.JsonSerializer.Serialize(question.CorrectAnswers))'>
                                    Редактировать
                                </button> *@
                                <form asp-action="DeleteQuestion" method="post" style="margin-top: 10px;">
                                    <input type="hidden" id="taskId" name="taskId" value="@Model.Id" />
                                    <input type="hidden" id="questionId" name="id" value="@question.Id" />
                                    <button class="btn" type="submit" style="border-radius: 10px; background-color: #9ACCFF; color: #300E36; width: 100%;">
                                        Удалить вопрос
                                    </button>
                                </form>
                                
                            </div>
                        </div>

                    </div>
                }
            }
            else
            {
                <p class="text-center">Нет вопросов для отображения.</p>
            }
        </div>


    <div class="modal fade" id="addQuestionModal" tabindex="-1" role="dialog" aria-labelledby="addQuestionModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content" style="border-radius: 15px;">
                <div class="modal-header">
                    <h5 class="modal-title" id="addQuestionModalLabel">Добавить вопрос</h5>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Закрыть" style="border: none; background: none;">
                        <span aria-hidden="true" style="font-size: 1.5rem;">&times;</span>
                    </button>
                </div>
                <form asp-action="CreateQuestion" method="post" enctype="multipart/form-data">
                <div class="modal-body">
                        <input type="hidden" id="taskId" name="id" value="@Model.Id" />
                        <div class="mb-3">
                            <label for="questionText" class="form-label">Вопрос</label>
                            <input type="text" class="form-control" id="questionText" name="questionText" required/>
                        </div>
                        <div class="mb-3">
                            <label for="questionType" class="form-label">Тип задания</label>
                            <select class="form-select" id="questionType" name="questionType" onchange="toggleFields()" required>
                                <option value="">Выберите тип задания</option>
                                <option value="Краткий ответ">Задание с кратким ответом</option>
                                <option value="Развернутый ответ">Задание с развернутым ответом</option>
                                <option value="Единичный выбор">Задание с единичным выбором</option>
                                <option value="Множественный выбор">Задание с множественным выбором</option>
                                <option value="Прикрепление файла">Задание с прикреплением файла</option>
                            </select>
                        </div>

                            <div class="file-upload-container">
                                <label for="fileUpload" class="file-upload-label">Перетащите сюда файлы или нажмите для загрузки</label>
                                <input type="file" id="fileUpload" name="files" multiple accept=".jpg, .jpeg, .png, .pdf, .docx" />

                                <button type="button" class="upload-button" id="showFileUploadButton">Загрузить файлы</button>
                                <div id="filePreviewContainer" class="file-preview"></div>
                                <small class="form-text">Вы можете вставлять файлы из буфера обмена или выбирать их из вашего устройства.</small>
                            </div>



                        <div class="mb-3" id="answersContainer" style="display: none;">
                            <label for="answers" class="form-label">Варианты ответов</label>
                            <div id="answerFields">
                                <div class="input-group mb-2">
                                    <input type="text" class="form-control" name="Answers[]" placeholder="Введите вариант ответа" />
                                    <button class="btn btn-danger" type="button" onclick="removeAnswer(this)">-</button>
                                </div>
                            </div>
                                <button class="btn" type="button" style="border-radius: 10px; background-color: #9ACCFF; color: #300E36;" onclick="addAnswer()">+</button>
                        </div>

                        <div class="mb-3" id="correctAnswersContainer" style="display: none;">
                            <label for="correctAnswers" class="form-label">Выберите правильные варианты ответа</label>
                            <div id="correctAnswersFields">
                                <!-- Здесь будут добавляться чекбоксы для правильных ответов -->
                            </div>
                        </div>

                        <div class="mb-3" id="correctAnswer" style="display: none;">
                            <label for="correctAnswer" class="form-label">Ответ</label>
                            <input type="text" class="form-control" name="correctAnswers" />
                        </div>

                        <div class="mb-3">
                            <label for="maxScore" class="form-label">Максимальный балл</label>
                            <input type="number" class="form-control" id="maxScore" name="maxScore" required />
                        </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn" data-bs-dismiss="modal" style="border-radius: 10px; background-color: #9ACCFF; color: black;">Закрыть</button>
                            <button type="submit" class="btn" id="saveQuestionButton" style="border-radius: 10px; background-color: #E3EFFF; color: black;">Сохранить</button>
                </div>
                </form>
            </div>
        </div>
    </div>


    <div class="modal fade" id="editQuestionModal" tabindex="-1" role="dialog" aria-labelledby="editQuestionModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editQuestionModalLabel">Редактировать вопрос</h5>
                </div>
                <form asp-action="EditQuestion" method="post">
                    <div class="modal-body">
                        <input type="hidden" id="taskId" name="taskId" value="@Model.Id" />
                        <input type="hidden" id="editQuestionId" name="editQuestionId" />
                        <div class="mb-3">
                            <label for="editQuestionType" class="form-label">Тип вопроса:</label>
                            <input type="text" class="form-control" id="editQuestionType" name="editQuestionType" required readonly/>
                        </div>

                        <div class="mb-3">
                            <label for="editQuestionText" class="form-label">Вопрос</label>
                            <input type="text" class="form-control" id="editQuestionText" name="editQuestionText" required />
                        </div>

                        <div class="mb-3" id="answersContainer" style="display: none;">
                            <label for="answers" class="form-label">Варианты ответов</label>
                            <div id="answerFields">
                                <div class="input-group mb-2">
                                    <input type="text" class="form-control" name="Answers[]" placeholder="Введите вариант ответа" />
                                    <button class="btn btn-danger" type="button" onclick="removeAnswer(this)">-</button>
                                </div>
                            </div>
                            <button class="btn" type="button" style="border-radius: 10px; background-color: #C5A8EA; color: #300E36;" onclick="addAnswer()">+</button>
                        </div>


                        <div class="mb-3" id="correctAnswersFields">
                            <label class="form-label">Правильные ответы</label>
                        </div>

                        <div class="mb-3">
                            <label for="editMaxScore" class="form-label">Максимальный балл</label>
                            <input type="number" class="form-control" id="editMaxScore" name="editMaxScore" />
                        </div>
                    </div>
                    <div class="modal-footer">
                            <button type="button" class="btn" data-dismiss="modal" style="border-radius: 10px; background-color: #9ACCFF; color: black;">Закрыть</button>
                            <button type="submit" class="btn" style="border-radius: 10px; background-color: #E3EFFF; color: black;">Сохранить изменения</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

        <div class="modal fade" id="assignTaskModal" tabindex="-1" role="dialog" aria-labelledby="assignTaskModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content" style="border-radius: 15px;">
                    <div class="modal-header">
                        <h5 class="modal-title" id="assignTaskModalLabel">Назначить ученика</h5>
                        <button type="button" class="close" data-bs-dismiss="modal" aria-label="Закрыть" style="border: none; background: none;">
                            <span aria-hidden="true" style="font-size: 1.5rem;">&times;</span>
                        </button>
                    </div>
                    @if (Model.Questions != null && Model.Questions.Any())
                    {
                        <form asp-action="AssignTask" method="post">
                            <div class="modal-body">
                                <input type="hidden" id="taskId" name="id" value="@Model.Id" />
                                <div class="mb-3">
                                    <label for="studentSelect">Выберите ученика</label>
                                    <select id="studentSelect" name="studentId" class="form-select" required>
                                        <option value="" disabled selected>-- Выберите ученика --</option>
                                        @foreach (var student in ViewBag.Students)
                                        {
                                            <option value="@student.Id">@student.Name @student.Surname</option>
                                        }
                                    </select>
                                </div>

                                <div class="mb-3">
                                    <label for="startDate">Дата и время начала</label>
                                    <input type="datetime-local" id="startDate" name="startDate" class="form-control" required />
                                </div>

                                <div class="mb-3">
                                    <label for="endDate">Дата и время окончания</label>
                                    <input type="datetime-local" id="endDate" name="endDate" class="form-control" required />
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn" data-bs-dismiss="modal" style="border-radius: 10px; background-color: #9ACCFF; color: black;">Закрыть</button>
                                <button type="submit" class="btn" id="saveQuestionButton" style="border-radius: 10px; background-color: #E3EFFF; color: black;">Назначить задание</button>
                            </div>
                        </form>
                    }
                    else
                    {
                        <div class="modal-body">
                            <p>Пустое задание нельзя назначить ученику. Добавьте сначала вопросы!</p>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="modal fade" id="errorModal" tabindex="-1" role="dialog" aria-labelledby="errorModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="errorModalLabel">Ошибка!</h5>
                    </div>
                    <div class="modal-body">
                        <p id="modalMessage"></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn" data-bs-dismiss="modal" style="border-radius: 10px; background-color: #9ACCFF; color: black;">Закрыть</button>
                    </div>
                </div>
            </div>
        </div>

    
</body>
<style>
    .file-upload-container {
        margin: 20px;
        border: 2px dashed #4a90e2;
        border-radius: 10px;
        padding: 20px;
        background-color: #f9f9f9;
        text-align: center;
    }

    .file-upload-label {
        display: block;
        font-size: 18px;
        margin-bottom: 10px;
        color: #4a90e2;
        cursor: pointer;
    }

    .upload-button {
        background-color: #4a90e2;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        margin-top: 10px;
    }

        .upload-button:hover {
            background-color: #357ab8;
        }

    #fileUpload {
        display: none; /* Скрываем стандартный input */
    }

    .file-preview {
        margin-top: 20px;
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

        .file-preview div {
            background-color: #ffffff;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 10px;
            margin: 5px;
            position: relative;
        }

        .file-preview img {
            width: 300px;
            object-fit: cover;
            border-radius: 5px;
        }

    .remove-btn {
        position: absolute;
        top: 5px;
        right: 5px;
        background: #e74c3c;
        color: white;
        border: none;
        border-radius: 3px;
        cursor: pointer;
        font-size: 12px;
        padding: 3px 5px;
    }


</style>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $('#editQuestionModal').on('show.bs.modal', function (event) {
            toggleFieldsForEdit();
            var button = $(event.relatedTarget);
            var questionId = button.data('question-id'); // Извлекаем ID вопроса
            var questionText = button.data('question-text'); // Извлекаем текст вопроса
            var questionType = button.data('question-type'); // Извлекаем тип вопроса
            var maxScore = button.data('question-maxscore'); // Извлекаем максимальный балл

            var answersData = button.data('answers');
            var correctAnswersData = button.data('correct-answers'); // Извлекаем правильные ответы
            console.log(questionType);
            if (questionType === 'Множественный выбор' || questionType === 'Единичный выбор') {
                $('#answerFields').css('display', 'block'); // Показать поля для вариантов ответов
            } else {
                $('#answerFields').css('display', 'none'); // Скрыть поля для вариантов ответов
            }
            console.log($('#answerFields').is(':visible'));
            // Заполняем поля формы
            $('#editQuestionId').val(questionId);
            $('#editQuestionText').val(questionText);
            $('#editQuestionType').val(questionType);
            $('#editMaxScore').val(maxScore);

            
        });
        // document.getElementById('saveQuestionButton').onclick = function (event) {
        //     event.preventDefault(); // предотвратить отправку формы по умолчанию

        //     const formData = new FormData();
        //     const id = document.getElementById('taskId').value;
        //     const questionText = document.getElementById('questionText').value;
        //     const questionType = document.getElementById('questionType').value;
        //     const maxScore = document.getElementById('maxScore').value;

        //     // Добавляем поля в FormData
        //     formData.append("id", id);
        //     formData.append("questionText", questionText);
        //     formData.append("questionType", questionType);
        //     formData.append("maxScore", maxScore);

        //     // Добавляем массив ответов
        //     const answers = document.querySelectorAll('input[name="Answers[]"]');
        //     answers.forEach(answerInput => {
        //         formData.append("Answers[]", answerInput.value);
        //     });

        //     // Добавляем массив правильных ответов
        //     const correctAnswers = document.querySelectorAll('input[name="correctAnswers"]:checked');
        //     correctAnswers.forEach(correctAnswerInput => {
        //         formData.append("CorrectAnswers[]", correctAnswerInput.value);
        //     });


        //     // Добавляем файлы
        //     filesArray.forEach(file => {
        //         formData.append("files", file);
        //     });
        //     for (const [key, value] of formData.entries()) {
        //         console.log(key, value);
        //     }
        //     // Отправка данных на сервер
        //     fetch("CreateQuestion", {
        //         method: "POST",
        //         body: formData
        //     })
        //     .then(response => {
        //         if (response.ok) {
        //             console.log("Данные успешно отправлены");
        //             $('#addQuestionModal').modal('hide'); // Закрываем модальное окно
        //         } else {
        //             console.error("Ошибка при отправке данных");
        //         }
        //     })
        //     .catch(error => {
        //         console.error("Произошла ошибка:", error);
        //     });
        // };

        // Функция добавления варианта ответа
        function addAnswer() {
            $('#answerFields').append(`
                <div class="input-group mb-2">
                    <input type="text" class="form-control" name="Answers[]" placeholder="Введите вариант ответа" />
        <button class="btn btn-danger" type="button" onclick="removeAnswer(this)">-</button>
                </div>
            `);
        }

        // Функция удаления варианта ответа
        function removeAnswer(button) {
            $(button).closest('.input-group').remove();
        }

        // Функция удаления правильного ответа
        function removeCorrectAnswer(button) {
            $(button).closest('.input-group').remove();
        }

        function toggleFields() {
            var questionType = document.getElementById("questionType").value;

            var answersContainer = document.getElementById("answersContainer");
            var correctAnswersContainer = document.getElementById("correctAnswersContainer");

            // Скрытие или отображение полей
            switch (questionType) {
                case "Краткий ответ":
                    answersContainer.style.display = "none";
                    correctAnswer.style.display = "block";
                    break;
                case "Развернутый ответ":
                case "Прикрепление файла":
                    answersContainer.style.display = "none";
                    correctAnswersContainer.style.display = "none";
                    correctAnswer.style.display = "none";
                    break;
                case "Единичный выбор":
                case "Множественный выбор":
                    answersContainer.style.display = "block";
                    correctAnswersContainer.style.display = "block";
                    correctAnswer.style.display = "none";
                    break;
                default:
                    answersContainer.style.display = "none";
                    correctAnswersContainer.style.display = "none";
                    correctAnswer.style.display = "none";
            }

            // Обновить варианты правильных ответов при изменении типа задания
            if (questionType === "Единичный выбор" || questionType === "Множественный выбор") {
                updateCorrectAnswerOptions(questionType);
            }
        }

        function toggleFieldsForEdit() {
            var questionType = document.getElementById("editQuestionType").value; // Получаем значение из editQuestionType
            var answersContainer = document.getElementById("answersContainer"); // Получаем контейнер с ответами

            if (questionType === 'Множественный выбор' || questionType === 'Единичный выбор') {
                answersContainer.style.display = 'block'; // Показать контейнер
            } else {
                answersContainer.style.display = 'none'; // Скрыть контейнер
            }
        }

        function addAnswer() {
            var answerFields = document.getElementById('answerFields');

            // Создадим новое поле ввода и кнопку для удаления
            var newDiv = document.createElement('div');
            newDiv.className = 'input-group mb-2';

            newDiv.innerHTML = `
                <input type="text" class="form-control" name="Answers[]" placeholder="Введите вариант ответа" />
                <button class="btn btn-danger" type="button" onclick="removeAnswer(this)">-</button>
            `;
            answerFields.appendChild(newDiv);

            // Обновить варианты правильных ответов при добавлении нового
            var questionType = document.getElementById("questionType").value;
            updateCorrectAnswerOptions(questionType);
        }

        function removeAnswer(button) {
            var answerFields = document.getElementById('answerFields');
            answerFields.removeChild(button.parentElement);

            // Обновить варианты правильных ответов при удалении
            var questionType = document.getElementById("questionType").value;
            updateCorrectAnswerOptions(questionType);
        }

        function updateCorrectAnswerOptions(questionType) {
            var answerFields = document.getElementsByName('Answers[]');
            var correctAnswersContainer = document.getElementById('correctAnswersFields');
            var correctAnswer = document.getElementById('correctAnswer');
            correctAnswer.innerHTML = '';
            // Очищаем предыдущие варианты правильных ответов
            correctAnswersContainer.innerHTML = '';

            for (var i = 0; i < answerFields.length; i++) {
                var answerValue = answerFields[i].value.trim();
                // Проверяем, не пустое ли значение
                if (answerValue !== "") {
                    var answerDiv = document.createElement('div');
                    if (questionType === "Единичный выбор") {
                        answerDiv.innerHTML = `
                            <input type="radio" name="correctAnswers" value="${answerValue}" id="correctAnswer${i}" />
                            <label for="correctAnswer${i}">${answerValue}</label>
                        `;
                    } else if (questionType === "Множественный выбор") {
                        answerDiv.innerHTML = `
                            <input type="checkbox" name="correctAnswers" value="${answerValue}" id="correctAnswer${i}" />
                            <label for="correctAnswer${i}">${answerValue}</label>
                        `;
                    }
                    correctAnswersContainer.appendChild(answerDiv);
                }
            }
        }

            let filesArray = [];

        // Обработчик события для выбора файлов
        document.getElementById('fileUpload').addEventListener('change', function (event) {
            const files = event.target.files;
            for (let i = 0; i < files.length; i++) {
                filesArray.push(files[i]); // Добавляем каждый выбранный файл в массив
            }

            renderFilePreview(); // Обновляем превью
        });

        // Обработчик кнопки загрузки файлов
        document.getElementById('showFileUploadButton').addEventListener('click', function () {
            document.getElementById('fileUpload').click();
        });

        // Функция для отображения предварительного просмотра файлов
        function renderFilePreview() {
            const previewContainer = document.getElementById("filePreviewContainer");
            previewContainer.innerHTML = ""; // Очищаем контейнер перед обновлением

            filesArray.forEach((file, index) => {
                const fileDiv = document.createElement("div");
                fileDiv.innerText = file.name;

                const removeBtn = document.createElement("button");
                removeBtn.innerText = "X";
                removeBtn.className = "remove-btn";
                removeBtn.onclick = function () {
                    removeFile(index); // Удаляем файл из массива по индексу
                };

                // Если файл — это изображение, показываем миниатюру
                if (file.type.startsWith("image/")) {
                    const img = document.createElement("img");
                    img.src = URL.createObjectURL(file);
                    img.style.width = "300px"; // Ограничиваем ширину миниатюры
                    img.style.height = "auto"; // Поддерживаем пропорции
                    fileDiv.appendChild(img);
                }
                fileDiv.appendChild(removeBtn); // Добавляем кнопку "Удалить"
                previewContainer.appendChild(fileDiv);
            });
        }

        // Функция для удаления файла
        function removeFile(index) {
            filesArray.splice(index, 1); // Удаляем файл из массива
            renderFilePreview(); // Обновляем превью
        }

        $(document).ready(function () {
            var errorMessage = @Html.Raw(Json.Serialize(TempData["ErrorMessage"]));
            if (errorMessage) {
                $('#modalMessage').text(errorMessage);
                $('#errorModal').modal('show');
            }
        });


        let dragged;

        function drag(event) {
            dragged = event.target; // Установить элемент, который мы перетаскиваем
            // Убедитесь, что мы перетаскиваем родительский элемент карточки
            if (event.target.classList.contains('question-card')) {
                event.dataTransfer.setData("text/plain", null); // Для Firefox
            } else {
                dragged = event.target.closest('.question-card');
            }
            dragged.style.opacity = 0.5; // Изменить стиль для визуализации перетаскивания
        }

        function allowDrop(event) {
            event.preventDefault(); // Разрешить перетаскивание
        }

        function drop(event) {
            event.preventDefault();
            // Убедитесь, что сбрасываемое место также соответствует карточке вопроса
            const target = event.target.closest('.question-card');
            if (target && target !== dragged) {
                // Переместить карточку
                target.parentNode.insertBefore(dragged, target.nextSibling);
                updateOrder();
            }
            dragged.style.opacity = ""; // Сбросить стиль
        }

        // Сбрасываем стиль при уходе мыши на другие элементы
        document.querySelectorAll('.question-card').forEach(element => {
            element.addEventListener('dragleave', function () {
                element.style.opacity = "";
            });
        });

        function updateOrder() {
            const questionsList = document.querySelectorAll('.question-card');

            // Массив для хранения обновленного порядка
            const orderData = [];

            questionsList.forEach((card, index) => {
                const questionId = card.getAttribute('data-question-id'); // Предполагается, что у вашей карточки есть атрибут data-id с идентификатором вопроса
                const taskId = document.getElementById('taskId').value; // Получаем taskId из скрытого поля
                orderData.push({
                    id: questionId,
                    numberInTask: index + 1, // Индексы начинаются с 0, поэтому добавляем 1
                    taskId: taskId // Добавляем taskId для передачи
                });
            });

            // Отправить новый порядок на сервер
            saveOrder(orderData);
        }

        function saveOrder(orderData) {
            // const taskId = orderData[0].taskId;
            // const id = orderData[0].id;

            // fetch(`/Task/EditQuestion?questionId=${id}&numberInTask=${orderData[0].numberInTask}&taskId=${taskId}`, {
            //     method: 'POST',
            //     headers: {
            //         'Content-Type': 'application/json'
            //     },
            //     body: JSON.stringify(orderData) // Если нужно, можете оставить это, если сервер ожидает тело
            // })
            //     .then(response => {
            //         if (response.ok) {
            //             console.log('Order updated successfully');
            //             // Обновите интерфейс или перезагрузите страницу, если это необходимо
            //             location.reload(); // Перезагрузить страницу
            //         } else {
            //             console.error('Error updating order');
            //         }
            //     })
            //     .catch(error => {
            //         console.error('Error sending data to server:', error);
            //     });
            console.log('Order Data:', orderData);
            fetch('/Task/EditQuestions', { // Здесь нужно указать правильный URL
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(orderData) // Отправляем весь массив как JSON
            })
                .then(response => {
                    if (response.ok) {
                        console.log('Order updated successfully');
                        location.reload(); // Перезагрузить страницу, чтобы отобразить обновленные данные
                    } else {
                        console.error('Error updating order');
                    }
                })
                .catch(error => {
                    console.error('Error sending data to server:', error);
                });
        }

        document.addEventListener('DOMContentLoaded', function () {
            const startDateInput = document.getElementById('startDate');
            const endDateInput = document.getElementById('endDate');

            // Получаем текущую дату и время в формате yyyy-MM-ddTHH:mm
            const now = new Date();
            const nowString = now.toISOString().slice(0, 16); // Убираем секунды и миллисекунды

            // Устанавливаем минимальное значение для startDate
            startDateInput.setAttribute('min', nowString);

            // Устанавливаем минимальное значение для endDate
            endDateInput.setAttribute('min', nowString);
        });



    </script>

}