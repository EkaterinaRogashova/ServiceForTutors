@using ServiceForTutorContracts.ViewModels
@using ServiceForTutorClientApp.Helpers
@model PaginatedList<ServiceForTutorContracts.ViewModels.AssignedTaskViewModel>

<div class="container mt-5">
    <div class="d-flex justify-content-between align-items-center">
        <h1 class="display-4">@ViewData["Title"]</h1>
    </div>
    <div class="text-center mt-4">
        <form method="GET" asp-action="AssignedTasks" class="mb-3">
            <div class="form-group d-flex align-items-center">
                <input type="hidden" name="studentId" value="@ViewData["StudentId"]" />
                <label for="statusFilter" class="mr-2">Фильтр по статусу:</label>
                <select id="statusFilter" name="status" class="form-control mr-2" style="flex: 1;">
                    <option value="">Все статусы</option>
                    @foreach (var status in StatusDictionary.GetAllStatuses())
                    {
                        <option value="@status">@StatusDictionary.GetTranslation(status)</option>
                    }
                </select>
                <button type="submit" class="btn-create">Применить фильтр</button>
            </div>
        </form>
        @{
            <table class="table table-striped table-bordered mt-4">
                <thead class="thead-light">
                    <tr>
                        <th>Название</th>
                        <th>Тема</th>
                        @if (APIClient.Client.Role == "Tutor")
                        {
                            <th>Ученик</th>
                        }
                        <th>Статус</th>
                        <th>Дата и время открытия</th>
                        <th>Дата и время закрытия</th>
                        <th>Действия</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Items)
                    {
                        @if (APIClient.Client.Role == "Tutor")
                        {
                            <tr>
                                <td>@Html.DisplayFor(modelItem => item.TaskName)</td>
                                <td>@Html.DisplayFor(modelItem => item.TaskTopic)</td>
                                <td>@Html.DisplayFor(modelItem => item.StudentFIO)</td>
                                <td>@StatusDictionary.GetTranslation(item.Status)</td>
                                <td>@item.DateTimeStart?.ToLocalTime().ToString("dd.MM.yyyy HH.mm")</td>
                                <td>@item.DateTimeEnd?.ToLocalTime().ToString("dd.MM.yyyy HH.mm")</td>

                                <td>
                                    @if (item.Status == "Assign")
                                    {
                                        <a class="btn btn-sm" data-bs-toggle="modal" data-bs-target="#confirmModal" data-id="@item.Id">Снять назначение</a>
                                    }
                                    else if (item.Status == "Completed")
                                    {
                                        <a class="btn btn-sm" asp-action="CheckTask" asp-route-id="@item.Id">Проверить</a>
                                    }
                                    else if (item.Status == "Checked")
                                    {
                                        <a class="btn btn-sm" asp-action="ResultCheck" asp-route-id="@item.Id">Просмотреть результат</a>
                                    }
                                </td>
                            </tr>
                            
                        }
                        else
                        {
                            <tr>
                                <td>@Html.DisplayFor(modelItem => item.TaskName)</td>
                                <td>@Html.DisplayFor(modelItem => item.TaskTopic)</td>
                                <td>@StatusDictionary.GetTranslation(item.Status)</td>
                                <td>@item.DateTimeStart?.ToString("dd.MM.yyyy HH.mm")</td>
                                <td>@item.DateTimeEnd?.ToString("dd.MM.yyyy HH.mm")</td>

                                <td>
                                    @if (item.Status == "Assign")
                                    {
                                        if (item.DateTimeEnd <= DateTime.Now)
                                        {
                                            <a class="btn btn-sm disabled">Просрочено</a>
                                        }
                                        else if (item.DateTimeStart >= DateTime.Now)
                                        {
                                            <a class="btn btn-sm disabled">Еще не доступно</a>
                                        }
                                        else
                                        {
                                            <a class="btn btn-sm" asp-action="CompletingTask" asp-route-id="@item.Id">Выполнить</a>
                                        }
                                    }
                                    else if (item.Status == "Completed")
                                    {
                                        <a class="btn btn-sm disabled">Результат проверки</a>
                                    }
                                    else if (item.Status == "Checked")
                                    {
                                        <a class="btn btn-sm" asp-action="ResultCheck" asp-route-id="@item.Id">Просмотреть результат</a>
                                    }
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }
    </div>
    <div class="modal fade" id="confirmModal" tabindex="-1" role="dialog" aria-labelledby="confirmModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmModalLabel">Подтверждение</h5>
                </div>
                <div class="modal-body">
                    Вы действительно хотите cнять назначение?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                    <a id="confirmRemoveTask" class="btn btn-sm">Подтвердить</a>
                </div>
            </div>
        </div>
    </div>
    
    @if (Model.TotalPages > 1)
    {
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center mt-4">
                @for (int i = 0; i < Model.TotalPages; i++)
                {
                    <li class="page-item @(i == Model.PageIndex ? "active" : "") mx-1">

                        <!-- Класс mx-1 для межкнопочных отступов -->
                        <a class="page-link" asp-action="AssignedTasks" asp-route-pageIndex="@i" asp-route-pageSize="@Model.PageSize" style="border-radius: 10px; background-color: #C5A8EA; color: #300E36;">
                            @(i + 1)
                        </a>
                    </li>
                }
            </ul>
        </nav>
    }


</div>
<script>
    // Подписка на событие открытия модального окна
    var confirmModal = document.getElementById('confirmModal');
    confirmModal.addEventListener('show.bs.modal', function (event) {
        var button = event.relatedTarget; // Кнопка, которая открыла модальное окно
        var id = button.getAttribute('data-id'); // Получаем идентификатор из атрибута data-id

        // Обновляем ссылку для подтверждения
        var confirmButton = document.getElementById('confirmRemoveTask');
        confirmButton.setAttribute('href', '@Url.Action("RemoveTask", "Task")' + '?id=' + id);
    });
</script>
<style>
    .form-group {
        display: flex;
        align-items: center; /* Выравнивание по центру по вертикали */
    }

    .form-control {
        margin-right: 10px; /* Отступ между выпадающим списком и кнопкой */
    }

    label {
        margin-right: 10px; /* Отступ между меткой и выпадающим списком */
    }

    body {
        background-color: #f8f9fa;
        font-family: 'Arial', sans-serif;
    }

    .container {
        margin-top: 20px;
        margin-bottom: 20px;
    }

    .table {
        width: 100%;
        margin: auto; /* Центрируем таблицу */
    }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: #f2f2f2; /* Светло-серый цвет для четных строк */
    }

    .table th {
        background-color: #007bff; /* Цвет заголовка таблицы */
        color: white; /* Цвет текста заголовка таблицы */
    }

    .page-item.active .page-link {
        background-color: #007bff; /* Цвет активной страницы */
        border-color: #007bff; /* Цвст активной страницы */
    }

    .page-link {
        color: #007bff; /* Цвет текста для ссылок на страницы */
    }

        .page-link:hover {
            background-color: #e9ecef; /* Цвет фона при наведении */
        }

    .btn-create {
        background-color: #C5A8EA;
        color: #300E36;
        padding: 10px 20px;
        margin-left: 50px;
        border-radius: 5px;
        transition: background-color 0.3s ease;
        border: none; /* Убирает границу */
        outline: none; /* Убирает обводку при фокусировке */
    }

        .btn-create:hover {
            background-color: #A67CBB; /* Более темный цвет при наведении */
        }


    h1 {
        color: #300E36;
    }

    .btn-back {
        background-color: #C5A8EA;
        color: #300E36;
        border-radius: 10px;
        padding: 10px 20px;
        border: none;
    }

        .btn-back:hover {
            background-color: #A67CBB;
        }

    .table {
        margin-top: 20px;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

        .table th {
            background-color: #C5A8EA;
            color: #300E36;
            text-align: center;
            padding: 15px;
        }

        .table td {
            vertical-align: middle;
            text-align: center;
            padding: 10px;
        }

    .btn-action {
        background-color: #C5A8EA;
        color: #300E36;
        padding: 5px 10px;
        border-radius: 5px;
        transition: background-color 0.3s ease;
    }

        .btn-action:hover {
            background-color: #A67CBB;
        }

    .btn-disabled {
        background-color: #e9ecef;
        color: #6c757d;
        padding: 5px 10px;
        border-radius: 5px;
    }

    tr {
        transition: background-color 0.3s ease;
    }

        tr:hover {
            background-color: #f1f1f1;
        }

    .btn-sm {
        margin: 5px; /* Для выравнивания кнопок */
    }
</style>
