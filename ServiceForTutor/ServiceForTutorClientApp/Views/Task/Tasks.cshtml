@using ServiceForTutorContracts.ViewModels
@model PaginatedList<ServiceForTutorContracts.ViewModels.TaskViewModel>

@{
    ViewData["Title"] = "Мои задания";
}

<div class="container mt-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="display-4">Мои задания</h1>
    </div>

    <div class="text-center mt-4">
        <div class="task-header">
            <input type="text" id="searchQuery" placeholder="Поиск по названию, теме или предмету..." class="search-input" />
            <a class="btn btn-create" asp-action="CreateTask">Создать задание</a>
        </div>

        <table class="table table-striped table-bordered mt-4">
            <thead>
                <tr>
                    <th>Название</th>
                    <th>Предмет</th>
                    <th>Тема</th>
                    <th>Действия</th>
                </tr>
            </thead>
            <tbody id="tasksBody">
                @foreach (var item in Model.Items)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.Name)</td>
                        <td>@Html.DisplayFor(modelItem => item.Subject)</td>
                        <td>@Html.DisplayFor(modelItem => item.Topic)</td>
                        <td>
                            <a class="btn btn-danger btn-sm" asp-action="DeleteTask" asp-route-id="@item.Id" onclick="return confirm('Вы уверены, что хотите удалить задание?');">Удалить</a>
                            <a class="btn btn-edit btn-sm" asp-action="EditTask" asp-route-id="@item.Id">Редактировать</a>
                            <a class="btn btn-view btn-sm" asp-action="ViewTask" asp-route-id="@item.Id">Просмотр</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (Model.TotalPages > 1)
    {
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center mt-4">
                @for (int i = 0; i < Model.TotalPages; i++)
                {
                    <li class="page-item @(i == Model.PageIndex ? "active" : "") mx-1">
                        <a class="page-link" asp-action="Tasks" asp-route-pageIndex="@i" asp-route-pageSize="@Model.PageSize" style="border-radius: 10px; background-color: #C5A8EA; color: #300E36;">
                            @(i + 1)
                        </a>
                    </li>
                }
            </ul>
        </nav>
    }
</div>

<style>
    .task-header {
        display: flex; /* Используем Flexbox для выравнивания */
        align-items: center; /* Вертикальное выравнивание элементов */
        justify-content: space-between; /* Распределение пространства между элементами */
        max-width: 800px; /* Максимальная ширина контейнера */
        margin: 20px auto; /* Центрирование контейнера с отступами */
    }

    .search-input {
        flex: 1; /* Позволяет полю ввода занять доступное пространство */
        padding: 10px; /* Отступ внутри input */
        border: 1px solid #ddd; /* Граница вокруг input */
        border-radius: 5px; /* Закругленные углы у input */
        font-size: 16px; /* Размер шрифта */
        margin-left: 20px; /* Отступ слева от поля ввода */
    }

    body {
        background-color: #f8f9fa;
        font-family: 'Arial', sans-serif;
    }

    h1 {
        color: #300E36; /* Цвет заголовка */
    }

    .table {
        margin-top: 20px;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); /* Тень для таблицы */
    }

        .table th {
            background-color: #C5A8EA;
            color: #300E36;
            text-align: center; /* Выравнивание заголовка по центру */
            padding: 15px;
        }

        .table td {
            vertical-align: middle;
            text-align: center; /* Выравнивание ячеек по центру */
            padding: 10px; /* Увеличиваем отступы в ячейках */
        }

    .btn {
        transition: background-color 0.3s ease;
        border-radius: 5px; /* Закругление углов кнопок */
        padding: 8px 12px; /* Одинаковый отступ для кнопок */
        margin: 5px; /* Добавим немного отступа между кнопками */
    }

    .btn-create {
        background-color: #C5A8EA;
        color: #300E36;
        padding: 10px 20px;
        margin-left: 50px;
        border-radius: 5px;
        transition: background-color 0.3s ease;
        border: none; /* Убирает границу */
        outline: none; /* Убирает обводку при фокусировке */
    }

        .btn-create:hover {
            background-color: #A67CBB; /* Более темный цвет при наведении */
        }

    .btn-danger {
        background-color: #dc3545; /* Красный фон для кнопки удаления */
    }

        .btn-danger:hover {
            background-color: #c82333;
        }

    .btn-edit {
        background-color: #C5A8EA; /* Создание стиля для кнопки редактирования */
        color: #300E36;
    }

        .btn-edit:hover {
            background-color: #A67CBB; /* Более темный цвет при наведении */
        }

    .btn-view {
        background-color: #C5A8EA; /* Создание стиля для кнопки просмотра */
        color: #300E36;
    }

        .btn-view:hover {
            background-color: #A67CBB; /* Более темный цвет при наведении */
        }

    tr {
        transition: background-color 0.3s ease;
    }

        tr:hover {
            background-color: #f1f1f1;
        }
</style>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('searchQuery').addEventListener('input', function () {
            const searchQuery = this.value;

            if (searchQuery.length >= 3) {
                const pageIndex = 0;
                const pageSize = 10;
                const url = `/task/Tasks?searchQuery=${encodeURIComponent(searchQuery)}&pageIndex=${pageIndex}&pageSize=${pageSize}`;

                fetch(url)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Сетевая ошибка');
                        }
                        return response.text(); // Изменено на text(), если ожидается HTML
                    })
                    .then(data => {
                        // Попробуем создать DOM-элемент из полученного HTML
                        const parser = new DOMParser();
                        const doc = parser.parseFromString(data, 'text/html');

                        // Например, получаем тело таблицы из полученного HTML
                        const newTasksBody = doc.getElementById('tasksBody'); // Замените 'tasksBody' на реальный ID вашего tbody

                        if (newTasksBody) {
                            const tasksBody = document.getElementById('tasksBody');
                            if (newTasksBody.children.length > 0) {
                                // Если найдены задачи, заменяем существующее тело таблицы
                                tasksBody.innerHTML = newTasksBody.innerHTML;
                            } else {
                                // Если задач нет, ничего не меняем
                                console.log('Задачи не найдены, ничего не меняем');
                            }
                        } else {
                            console.error('Не удалось найти тело задач в новом HTML.');
                        }
                    })
                    .catch(error => {
                        console.error('Произошла ошибка:', error);
                    });
            }
            else{
                const url = `/task/Tasks?pageIndex=0&pageSize=10`;

                fetch(url)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Сетевая ошибка');
                        }
                        return response.text(); // Ожидается HTML
                    })
                    .then(data => {
                        const parser = new DOMParser();
                        const doc = parser.parseFromString(data, 'text/html');

                        const newTasksBody = doc.getElementById('tasksBody');
                        const tasksBody = document.getElementById('tasksBody');

                        if (newTasksBody) {
                            tasksBody.innerHTML = newTasksBody.innerHTML; // Обновляем список задач
                        } else {
                            console.error('Не удалось найти тело задач в новом HTML.');
                        }
                    })
                    .catch(error => {
                        console.error('Произошла ошибка:', error);
                    });
            }
        });
    });
</script>


